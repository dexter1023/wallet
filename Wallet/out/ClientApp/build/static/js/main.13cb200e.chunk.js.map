{"version":3,"sources":["components/Button/index.tsx","components/TableRow/index.tsx","components/TableHeader/index.tsx","components/Table/index.tsx","plugins/axios.ts","services/transaction.service.ts","views/List.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","children","props","type","TableRow","data","title","category","name","TableHeader","Table","console","log","map","el","i","axios","create","baseURL","TransactionService","get","payload","post","put","id","List","useState","transactions","setTransactions","transactionService","useMemo","fetchTransactions","a","getTransactions","useEffect","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAUeA,G,MANgE,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,SAAmBC,GAAW,EAApBC,KAAoB,oCAC3G,OACI,kDAAYD,GAAZ,aAAoBD,OCcbG,EAXE,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,KACf,OACI,+BACI,6BAAKA,EAAKC,QACV,6BAAKD,EAAKE,SAASC,OACnB,6BAAKH,EAAKF,OACV,6BAAI,cAAC,EAAD,2BCADM,EAbK,WAChB,OACI,gCACI,+BACI,uCACA,2CACA,gDACA,6CCMhB,IAYeC,EAZD,SAAC,GAAyB,IAAxBL,EAAuB,EAAvBA,KAEZ,OADAM,QAAQC,IAAIP,GAER,kCACI,cAAC,EAAD,IACA,gCACKA,EAAKQ,KAAI,SAACC,EAAIC,GAAL,OAAW,cAAC,EAAD,CAA2BV,KAAMS,GAAjC,cAAsBC,a,wBCnB5CC,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAiD,SCAtCC,EAAb,qPAG6BH,EAAMI,IAAoB,iBAHvD,uBAGcf,EAHd,EAGcA,KAHd,kBAIaA,GAJb,2OAU0BgB,GAV1B,kGAY6BL,EAAMM,KAAmB,gBAAiBD,GAZvE,uBAYchB,EAZd,EAYcA,KAZd,kBAaaA,GAbb,4OAmB0BgB,GAnB1B,kGAqB6BL,EAAMO,IAAN,wBAAyCF,EAAQG,IAAMH,GArBpF,uBAqBchB,EArBd,EAqBcA,KArBd,kBAsBaA,GAtBb,kKCwBeoB,EAtBe,WAAO,IAAD,EACQC,mBAAyB,IADjC,mBACzBC,EADyB,KACXC,EADW,KAE1BC,EAAqBC,mBAAQ,kBAAM,IAAIX,IAAsB,IAE7DY,EAAiB,uCAAG,4BAAAC,EAAA,+EAECH,EAAmBI,kBAFpB,OAEZ5B,EAFY,OAGlBuB,EAAgBvB,GAHE,gDAKlBM,QAAQC,IAAR,MALkB,yDAAH,qDAavB,OAJAsB,qBAAU,WACNH,MACD,IAGC,cAAC,EAAD,CAAO1B,KAAMsB,KClBNQ,EAFH,kBAAM,cAAC,EAAD,KCWHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.13cb200e.chunk.js","sourcesContent":["import React, { ButtonHTMLAttributes } from 'react'\nimport './index.scss'\n\n\nexport const Button: React.FC<React.ButtonHTMLAttributes<HTMLButtonElement>> = ({children, type, ...props}) => {\n    return (\n        <button {...props}>{children}</button>\n    )\n}\n\nexport default Button","import React from 'react'\nimport { TransactionTypeEnum } from \"../../enums/transaction-type.enum\"\nimport { ITransaction } from \"../../types/transaction.model\"\nimport Button from '../Button'\n\ninterface ITableRowProps {\n    data: ITransaction\n}\n\nconst TableRow = ({data}: ITableRowProps) => {\n    return (\n        <tr>\n            <td>{data.title}</td>\n            <td>{data.category.name}</td>\n            <td>{data.type}</td>\n            <td><Button>Edytuj</Button></td>\n        </tr>\n    )\n}\n\nexport default TableRow\n","import React from 'react'\n\nconst TableHeader = () => {\n    return (\n        <thead>\n            <tr>\n                <th>Nazwa</th>\n                <th>Kategoria</th>\n                <th>Typ transakcji</th>\n                <th>Akcje</th>\n            </tr>\n        </thead>\n    )\n}\n\nexport default TableHeader","import React from 'react'\nimport { ITransaction } from \"../../types/transaction.model\"\nimport TableRow from '../TableRow';\nimport TableHeader from '../TableHeader'\n\ninterface ITableProps {\n    data: ITransaction[];\n    children?: React.ReactNode;\n}\n\nfunction mapRows (data: ITransaction[]): React.ReactNode {\n    \n    return data.map((el, i) => <TableRow key={`row-${i}`} data={el}/>)\n}\n\nconst Table = ({data}: ITableProps) => {\n    console.log(data)\n    return (\n        <table>\n            <TableHeader />\n            <tbody>\n                {data.map((el, i) => <TableRow key={`row-${i}`} data={el}/>)}\n            </tbody>\n        </table>\n    )\n}\n\nexport default Table","import axios from 'axios'\n\nexport default axios.create({\n  baseURL: process.env.NODE_ENV === 'production' ? '/api' : 'https://localhost:5001/api',\n})\n","import axios from '../plugins/axios'\nimport { ITransaction } from '../types/transaction.model'\n\nexport class TransactionService {\n  async getTransactions(): Promise<ITransaction[]> {\n    try {\n      const { data } = await axios.get<ITransaction[]>('/transactions')\n      return data\n    } catch (e) {\n      throw e\n    }\n  }\n\n  async createTransaction(payload: ITransaction): Promise<ITransaction> {\n    try {\n      const { data } = await axios.post<ITransaction>('/transactions', payload)\n      return data\n    } catch (e) {\n      throw e\n    }\n  }\n\n  async updateTransaction(payload: ITransaction): Promise<ITransaction> {\n    try {\n      const { data } = await axios.put<ITransaction>(`/transactions/${payload.id}`, payload)\n      return data\n    } catch (e) {\n      throw e\n    }\n  }\n}\n","import React, {useState, useEffect, useMemo} from 'react';\nimport Table from '../components/Table';\nimport {TransactionService} from '../services/transaction.service'\nimport { ITransaction } from \"../types/transaction.model\";\n\nexport const List: React.FC = () => {\n    const [transactions, setTransactions] = useState<ITransaction[]>([])\n    const transactionService = useMemo(() => new TransactionService(), [])    \n\n    const fetchTransactions = async () => {\n        try {\n            const data = await transactionService.getTransactions()\n            setTransactions(data);\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    useEffect(() => {\n        fetchTransactions()\n    }, [])\n\n    return (\n        <Table data={transactions} />\n    )\n}\n\nexport default List","import React, {  } from 'react';\nimport List from './views/List'\n\nconst App = () => <List />\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}